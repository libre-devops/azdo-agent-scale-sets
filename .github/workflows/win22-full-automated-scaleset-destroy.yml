name: 'Windows Server 2022 - Automated Scale Set Destroy'

# Allow run manually
on:
  workflow_dispatch:
    inputs:
      enable_debug_mode:
        type: boolean
        description: 'Whether debug mode should be enable for within the script'
        default: false

jobs:
  destroy-scale-set:
    name: 'Destroy Scale Set'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v3

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install tenv
        id: install-tenv
        shell: pwsh
        run: |
          $tfenvUri = "https://api.github.com/repos/tofuutils/tenv/releases/latest"
          $tenvLatestVersion = (Invoke-RestMethod -Uri $tfenvUri).tag_name

          $tenvDownloadUrl = "https://github.com/tofuutils/tenv/releases/latest/download/tenv_${tenvLatestVersion}_amd64.deb"
          $tenvFilePath = "./tenv_${tenvLatestVersion}_amd64.deb"
          Invoke-WebRequest -Uri $tenvDownloadUrl -OutFile $tenvFilePath

          sudo dpkg -i $tenvFilePath

      - name: Install PowerShell modules
        id: install-powershell-modules
        shell: pwsh
        run: |
          pwsh -Command Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted ; `
          pwsh -Command Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser -Repository PSGallery ; `
          pwsh -Command Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser -Repository PSGallery 

      - name: Build
        id: run-script
        shell: pwsh
        run: |
          function Convert-ToBoolean($value)
            {
                $valueLower = $value.ToLower()
                if ($valueLower -eq "true")
                {
                    return $true
                }
                elseif ($valueLower -eq "false")
                {
                    return $false
                }
                else
                {
                    throw "[$( $MyInvocation.MyCommand.Name )] Error: Invalid value - $value. Exiting."
                    exit 1
                }
            }
          
          $DebugMode = Convert-ToBoolean ${{ inputs.enable_debug_mode }}
          
          .\Run-AzTerraform.ps1 `
            -TerraformCodeLocation "terraform/1-scale-set" `
            -RunTerraformInit true `
            -RunTerraformPlan false `
            -RunTerraformPlanDestroy true `
            -RunTerraformApply false `
            -RunTerraformDestroy true `
            -DebugMode $DebugMode `
            -RunTrivy false `
            -RunCheckov false `
            -RunTerraformCompliance false `
            -TerraformCompliancePolicyFiles "" `
            -DeletePlanFiles true `
            -TerraformVersion "default" `
            -BackendStorageSubscriptionId ${{ secrets.SpokeSubscriptionId }} `
            -BackendStorageAccountRgName ${{ secrets.SpokeMgmtRgName }} `
            -BackendStorageAccountName ${{ secrets.SpokeSaName }} `
            -BackendStorageAccountBlobContainerName ${{ secrets.SpokeSaBlobContainerName }} `
            -BackendStorageAccountBlobStatefileName "lbd-uks-prd-azdo-scale-set.terraform.tfstate"
        env:
          ARM_CLIENT_ID: ${{ secrets.SpokeSvpApplicationId }}
          ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubscriptionId }}
          ARM_TENANT_ID: ${{ secrets.SpokeSvpTenantId }}
          ARM_USE_AZUREAD: true
          AZDO_ORG_SERVICE_URL: ${{ secrets.AzdoOrgServiceUrl }}

  run-delete-images:
    name: 'Delete Images'
    needs: destroy-scale-set
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v3

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install PowerShell modules
        id: install-powershell-modules
        shell: pwsh
        run: |
          pwsh -Command Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted ; `
          pwsh -Command Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser -Repository PSGallery ; `
          pwsh -Command Install-Module -Name Az.Compute -Force -AllowClobber -Scope CurrentUser -Repository PSGallery ; `
          pwsh -Command Install-Module -Name Az.Network -Force -AllowClobber -Scope CurrentUser -Repository PSGallery ; `
          pwsh -Command Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser -Repository PSGallery ; `
          pwsh -Command Install-Module -Name Az.Keyvault -Force -AllowClobber -Scope CurrentUser -Repository PSGallery 

      - name: Delete Images
        id: run-script
        shell: pwsh
        run: |
          ./Delete-ComputeGalleryImages `
          -ApplicationId $Env:ARM_CLIENT_ID `
          -TenantId $Env:ARM_TENANT_ID `
          -Secret $Env:ARM_CLIENT_SECRET `
          -SubscriptionId $Env:ARM_SUBSCRIPTION_ID
        env:
          ARM_CLIENT_ID: ${{ secrets.SpokeSvpApplicationId }}
          ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubscriptionId }}
          ARM_TENANT_ID: ${{ secrets.SpokeSvpTenantId }}

  run-delete-pre-reqs:
    name: 'Run Pre-Req destroy'
    needs: run-delete-images
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - uses: actions/checkout@v3

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install tenv
        id: install-tenv
        shell: pwsh
        run: |
          $tfenvUri = "https://api.github.com/repos/tofuutils/tenv/releases/latest"
          $tenvLatestVersion = (Invoke-RestMethod -Uri $tfenvUri).tag_name

          $tenvDownloadUrl = "https://github.com/tofuutils/tenv/releases/latest/download/tenv_${tenvLatestVersion}_amd64.deb"
          $tenvFilePath = "./tenv_${tenvLatestVersion}_amd64.deb"
          Invoke-WebRequest -Uri $tenvDownloadUrl -OutFile $tenvFilePath

          sudo dpkg -i $tenvFilePath

      - name: Install PowerShell modules
        id: install-powershell-modules
        shell: pwsh
        run: |
          pwsh -Command Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted ; `
          pwsh -Command Install-Module -Name Az.Accounts -Force -AllowClobber -Scope CurrentUser -Repository PSGallery ; `
          pwsh -Command Install-Module -Name Az.Storage -Force -AllowClobber -Scope CurrentUser -Repository PSGallery 

      - name: Build
        id: run-script
        shell: pwsh
        run: |
          function Convert-ToBoolean($value)
            {
                $valueLower = $value.ToLower()
                if ($valueLower -eq "true")
                {
                    return $true
                }
                elseif ($valueLower -eq "false")
                {
                    return $false
                }
                else
                {
                    throw "[$( $MyInvocation.MyCommand.Name )] Error: Invalid value - $value. Exiting."
                    exit 1
                }
            }

          $DebugMode = Convert-ToBoolean ${{ inputs.enable_debug_mode }}

          .\Run-AzTerraform.ps1 `
            -TerraformCodeLocation "terraform/0-pre-req" `
            -RunTerraformInit true `
            -RunTerraformPlan false `
            -RunTerraformPlanDestroy true `
            -RunTerraformApply false `
            -RunTerraformDestroy true `
            -DebugMode $DebugMode `
            -RunTrivy false `
            -RunCheckov false `
            -RunTerraformCompliance false `
            -TerraformCompliancePolicyFiles "" `
            -DeletePlanFiles true `
            -TerraformVersion "default" `
            -BackendStorageSubscriptionId ${{ secrets.SpokeSubscriptionId }} `
            -BackendStorageAccountRgName ${{ secrets.SpokeMgmtRgName }} `
            -BackendStorageAccountName ${{ secrets.SpokeSaName }} `
            -BackendStorageAccountBlobContainerName ${{ secrets.SpokeSaBlobContainerName }} `
            -BackendStorageAccountBlobStatefileName "lbd-uks-prd-azdo-pre-req.terraform.tfstate"
        env:
          ARM_CLIENT_ID: ${{ secrets.SpokeSvpApplicationId }}
          ARM_CLIENT_SECRET: ${{ secrets.SpokeSvpClientSecret }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SpokeSubscriptionId }}
          ARM_TENANT_ID: ${{ secrets.SpokeSvpTenantId }}
          ARM_USE_AZUREAD: true
